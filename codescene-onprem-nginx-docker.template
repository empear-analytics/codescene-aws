#Author: Kalle Norrestam (kalle.norrestam@empear.com)
#Date: 2019-10-15
AWSTemplateFormatVersion: "2010-09-09"
Description:  "This template creates the infrastructure for running Codescene OnPrem behind nginx in docker in an EC2 instance"
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - Label:  
          default: "Application Configuration"
        Parameters: 
          - ApplicationName
      - Label: 
          default: "Network Configuration"
        Parameters: 
          - VpcCIDR
          - PublicSubnetCIDR
          - InboundSSHCIDR
      - Label: 
          default: "Amazon EC2 Configuration"
        Parameters: 
          - InstanceType
          - KeyPair
Parameters:
  ApplicationName:
    Description: Application name that will be prefixed to resource names
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})$'
    ConstraintDescription: Your IP Range for SSH must be a valid IP CIDR range of the form x.x.x.x/x.

  PublicSubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet
    Type: String
    Default: 10.0.0.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})$'
    ConstraintDescription: Your IP Range for SSH must be a valid IP CIDR range of the form x.x.x.x/x.

  InboundSSHCIDR:
    Description: Please enter the IP range (CIDR notation) from your home network to allow inbound SSH traffic
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})$'
    ConstraintDescription: Your IP Range for SSH must be a valid IP CIDR range of the form x.x.x.x/x.

  KeyPair:
    Description: Key used to ssh to the EC2 instance
    Type: "AWS::EC2::KeyPair::KeyName"

  InstanceType: 
    Description: Select your instance type
    Type: String
    Default: t2.micro
    AllowedValues: 
      - t2.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m5d.large
      - m5d.xlarge
      - m5d.2xlarge
Outputs:
  URL:
    Description: URL to application
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - PublicEC2Instance
          - PublicDnsName
  PublicIp:
    Description: Public IP address
    Value: !GetAtt 
      - PublicEC2Instance
      - PublicIp
  PublicDnsName:
    Description: Public DNS name
    Value: !GetAtt 
      - PublicEC2Instance
      - PublicDnsName

Mappings: 
  MapRegionToAMI:
    # Amazon Linux 2 IDs from https://aws.amazon.com/amazon-linux-2/release-notes/
    eu-west-2: 
      HVM64: "ami-0957378a34aff1ea7"
    ca-central-1: 
      HVM64: "ami-09950a084b53d325b"
    us-west-2: 
      HVM64: "ami-000b133338f7f4255"
    ap-east-1: 
      HVM64: "ami-a60378d7"
    us-east-2: 
      HVM64: "ami-09d9edae5eb90d556"
    us-east-1: 
      HVM64: "ami-00b882ac5193044e4"
    us-west-1: 
      HVM64: "ami-0e9f62b664e24851b"
    sa-east-1: 
      HVM64: "ami-068cf59f62e729bac"
    eu-west-3: 
      HVM64: "ami-0534359810a211f57"
    eu-central-1: 
      HVM64: "ami-0ec49d80d3f7f4bb0"
    eu-west-1: 
      HVM64: "ami-0f62aafc6efe8fd7b"
    ap-northeast-2: 
      HVM64: "ami-0eeea189e6caff27e"
    ap-northeast-1: 
      HVM64: "ami-0ebe863c3d16bca9d"
    ap-south-1: 
      HVM64: "ami-043f9106e7f451340"
    ap-southeast-2: 
      HVM64: "ami-0a9dfabb44798b3d5"
    eu-north-1: 
      HVM64: "ami-8535bdfb"
    ap-northeast-3: 
      HVM64: "ami-09edee4ed8a06196d"
    ap-southeast-1: 
      HVM64: "ami-0a049a078abd8ade3"
    cn-north-1: 
      HVM64: "ami-06de8caae8f243e81"
    cn-northwest-1: 
      HVM64: "ami-0a1974f50cd3c9b58"
    us-gov-west-1: 
      HVM64: "ami-56a8d237"
    us-gov-east-1: 
      HVM64: "ami-78db3a09"

  Scripts:
    install-docker-compose:
      script: |
        #!/bin/bash
        set -x -e
        curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
        usermod -aG docker ec2-user

    install-codescene:
      script: |
        #!/bin/bash
        set -x -e
        git clone https://github.com/empear-analytics/codescene-aws.git

    configure-ssh:
      script: |
        #!/bin/bash
        set -x -e
        ssh-keygen -t rsa -N "" -f ~/.ssh/id_rsa
        #ssh-keyscan -t rsa github.com | ssh-keygen -lf -

    run-codescene:
      script: |
        #!/bin/bash
        cd codescene-aws
        docker-compose up -d
        
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}_VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}_IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}_Public_Subnet
    
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}_Public_Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  NetworkAcl:
      Type: AWS::EC2::NetworkAcl
      Properties:
        VpcId: !Ref VPC
        Tags:
        - Key: Name
          Value: !Sub ${ApplicationName}_NACL

  PublicSubnetNetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet
      NetworkAclId: !Ref NetworkAcl

  NetworkAclEntryHttpInbound:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId: !Ref NetworkAcl
        RuleNumber: 100
        Protocol: 6
        RuleAction: allow
        Egress: False
        CidrBlock: 0.0.0.0/0
        PortRange:
            From: 80
            To: 80

  NetworkAclEntryHttpsInbound:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId: !Ref NetworkAcl
        RuleNumber: 200
        Protocol: 6
        RuleAction: allow
        Egress: False
        CidrBlock: 0.0.0.0/0
        PortRange:
            From: 443
            To: 443

  NetworkAclEntrySshInbound:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId: !Ref NetworkAcl
        RuleNumber: 300
        Protocol: 6
        RuleAction: allow
        Egress: False
        CidrBlock: !Ref InboundSSHCIDR
        PortRange:
            From: 22
            To: 22

  NetworkAclEntryEphemeralInbound:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId: !Ref NetworkAcl
        RuleNumber: 400
        Protocol: 6
        RuleAction: allow
        Egress: False
        CidrBlock: 0.0.0.0/0
        PortRange:
            From: 32768
            To: 65535

  NetworkAclEntryHttpOutbound:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId: !Ref NetworkAcl
        RuleNumber: 100
        Protocol: 6
        RuleAction: allow
        Egress: True
        CidrBlock: 0.0.0.0/0
        PortRange:
            From: 80
            To: 80

  NetworkAclEntryHttpsOutbound:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId: !Ref NetworkAcl
        RuleNumber: 200
        Protocol: 6
        RuleAction: allow
        Egress: True
        CidrBlock: 0.0.0.0/0
        PortRange:
            From: 443
            To: 443

  NetworkAclEntrySshOutbound:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId: !Ref NetworkAcl
        RuleNumber: 300
        Protocol: 6
        RuleAction: allow
        Egress: True
        CidrBlock: 0.0.0.0/0
        PortRange:
            From: 22
            To: 22

  NetworkAclEntryEphemeralOutbound:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId: !Ref NetworkAcl
        RuleNumber: 400
        Protocol: 6
        RuleAction: allow
        Egress: True
        CidrBlock: 0.0.0.0/0
        PortRange:
            From: 1024
            To: 65535

  PublicSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Public Security Group"
      GroupName: !Sub ${ApplicationName}_Public_Routes
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref InboundSSHCIDR
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0

  PublicEC2Instance:
    Type: "AWS::EC2::Instance"
    Metadata: 
      AWS::CloudFormation::Init:
        configSets:
          default:
            - enable_extras
            - basic_install
            - custom_install
            - configuration
            - startup

        enable_extras:
          commands:
            enable_docker:
              command: 'amazon-linux-extras enable docker'
            enable_nginx:
              command: 'amazon-linux-extras enable nginx1'

        basic_install: 
          packages:
            yum:
              git : []
              docker : []
          services: 
            sysvinit:
              docker:
                enabled: "true"
                ensureRunning: "true"

        custom_install:
          commands:
            1_install_docker_compose:
              command: !FindInMap [ Scripts, install-docker-compose, script ]
            2_install_codescene:
              command: !FindInMap [ Scripts, install-codescene, script ]

        configuration:
          commands:
            1_configure_ssh:
              command: !FindInMap [ Scripts, configure-ssh, script ]
        
        startup:
          commands:
            1_run_codescene:
              command: !FindInMap [ Scripts, run-codescene, script ]
        
    Properties:
      ImageId: !FindInMap [MapRegionToAMI, !Ref "AWS::Region", HVM64]
      KeyName: !Ref KeyPair
      InstanceType: !Ref InstanceType
      Tenancy: "default"
      InstanceInitiatedShutdownBehavior: "stop"
      Tags:
      - Key: Name
        Value: !Sub ${ApplicationName}_EC2
      BlockDeviceMappings: 
      - DeviceName: "/dev/xvda"
        Ebs: 
          VolumeSize: 8
          DeleteOnTermination: true
          VolumeType: "gp2"
      NetworkInterfaces: 
      - DeviceIndex: "0"
        Description: "Primary network interface"
        DeleteOnTermination: true
        SubnetId: !Ref PublicSubnet
        GroupSet: 
        - !Ref PublicSecurityGroup
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          /opt/aws/bin/cfn-init --stack ${AWS::StackId} --resource PublicEC2Instance --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource PublicEC2Instance --region ${AWS::Region}
